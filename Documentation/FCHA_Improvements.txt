Code quality
- Uniquify all managers
- Unit tests
- Organize files in filesystem (move by layers - data access, data structures, view models, dialogs, ...)
- Utilize Linq to sqlite
- Utilize WPF features to reduce code size

UI
- General dialogs (rather than speciffic ones for each data structure)
- Property sheets

Collections management
- Utilize observable collections
- Preserve selection and expanded nodes (for tree view)
- Don't update everything

User experrience
- Add hotkeys
- Introduce commands
- Check can be executed
- User input data validation

Functionality
- User settings (key-value pairs)
- Database versioning
- Auto-complete based on e.g. categories list
- Auto complete based on statistical probability (MRU first)
- User commands (for most-frequent entries)

Specific features
- User setting - date change bound
- User setting - currency
- Expense category speciffication (from general to particular for existing expense)
- Global variables - e.g. date for inputting older expenses

Settings
- Database path
- MUI?

Graphics
- Icons

Code organization
- Move database code to Code from Data

Technical
- Migrate to the latest Visual Studio

Information
 - Static - e.g. currency list
 - Dynamic - e.g. rates
 - Informtaion security - don't commit personal database data; commit rather the SQL DML for the database

Processes
 - Account flows aggregation?


todo:
Trigger: Remove all balances for removed account
All viewModels should be unique in the process